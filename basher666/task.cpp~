#include "opencv2/opencv.hpp"
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include "opencv/cv.h"
#include <bits/stdc++.h>


//#define INPUT_FILE              "../input.jpg"
#define OUTPUT_FOLDER_PATH      string("")

using namespace std;
using namespace cv;
char  *INPUT_FILE;
Point findIntersection(Point p1,Point p2,Point p3,Point p4)
{
  float xD1,yD1,xD2,yD2,xD3,yD3;
  float dot,deg,len1,len2;
  float segmentLen1,segmentLen2;
  float ua,ub,div;
  Point def;
  def.x=0;
  def.y=INT_MAX;
  // calculate differences
  xD1=p2.x-p1.x;
  xD2=p4.x-p3.x;
  yD1=p2.y-p1.y;
  yD2=p4.y-p3.y;
  xD3=p1.x-p3.x;
  yD3=p1.y-p3.y;

  // calculate the lengths of the two lines
  len1=sqrt(xD1*xD1+yD1*yD1);
  len2=sqrt(xD2*xD2+yD2*yD2);

  // calculate angle between the two lines.
  dot=(xD1*xD2+yD1*yD2); // dot product
  deg=dot/(len1*len2);

  // if abs(angle)==1 then the lines are parallell,
  // so no intersection is possible
  if(abs(deg)==1)
    return def;

  // find intersection Pt between two lines
  Point pt;
  pt.x=0;
  pt.y=0;
  
  div=yD2*xD1-xD2*yD1;
  ua=(xD2*yD3-yD2*xD3)/div;
  ub=(xD1*yD3-yD1*xD3)/div;
  pt.x=p1.x+ua*xD1;
  pt.y=p1.y+ua*yD1;

  // calculate the combined length of the two segments
  // between Pt-p1 and Pt-p2
  xD1=pt.x-p1.x;
  xD2=pt.x-p2.x;
  yD1=pt.y-p1.y;
  yD2=pt.y-p2.y;
  segmentLen1=sqrt(xD1*xD1+yD1*yD1)+sqrt(xD2*xD2+yD2*yD2);

  // calculate the combined length of the two segments
  // between Pt-p3 and Pt-p4
  xD1=pt.x-p3.x;
  xD2=pt.x-p4.x;
  yD1=pt.y-p3.y;
  yD2=pt.y-p4.y;
  segmentLen2=sqrt(xD1*xD1+yD1*yD1)+sqrt(xD2*xD2+yD2*yD2);

  // if the lengths of both sets of segments are the same as
  // the lenghts of the two lines the point is actually
  // on the line segment.

  // if the point isnâ€™t on the line, return null
  if(abs(len1-segmentLen1)>0.01 || abs(len2-segmentLen2)>0.01)
    return def;

  // return the valid intersection
  return pt;
}

std::pair <int,int> find_origin()
{

  Mat src=imread(INPUT_FILE);
  Mat odst,odst2;
  
  Canny(src,odst,50,200,3);
  cvtColor(odst,odst2,CV_GRAY2BGR);
  vector<Vec4i> lines;
  
  HoughLinesP(odst,lines,1,CV_PI/180,100,150,10);

  vector<Point > o_store;
  
  if(lines.size()>2)
    {
      Point tmp;
      
      for(size_t i=0;i<lines.size()-1;i++)
	{
	  for(size_t j=i+1;j<lines.size();j++)
	    {
	      Vec4i l=lines[i];
	      Vec4i l2=lines[j];


	      Point a.x=l[0];
	      a.y=l[1];
	      Point b.x=l[2];
	      b.y=l[3];


	      Point c.x=l2[0];
	      c.y=l2[1];
	      Point d.x=l2[2];
	      d.y=l2[3];

	      tmp=findIntersection(a,b,c,d);
	      o_store.push_back(tmp);
	    }
	}

    }
  for(size_t i=0;i<lines.size();i++)
    {
      Vec4i l=lines[i];
      line(odst2,Point(l[0],l[1]),Point(l[2],l[3]),Scalar(255,0,0),3,CV_AA);
      odst2[o_store.x][o_store.y]=Scalar(0,255,0);
    }
  imshow("lines",odst2);
  waitKey(3000);
}

int main(int argc, char** argv)
{
  INPUT_FILE=argv[1];
  pair <int ,int > x =find_origin();

  Mat large = imread(INPUT_FILE);
  Mat rgb=large;
  // downsample and use it for processing
  //pyrDown(large, rgb);
  Mat small;
  cvtColor(rgb, small, CV_BGR2GRAY);
  
  // morphological gradient
  Mat grad;
  Mat morphKernel = getStructuringElement(MORPH_ELLIPSE, Size(3,3));
  //Mat morphKernel = getStructuringElement(MORPH_RECT, Size(3, 3));


  morphologyEx(small, grad, MORPH_GRADIENT, morphKernel);
  //imshow("gradient",grad);
  //waitKey(30000);
  
  // binarize
  Mat bw;
  //threshold(grad, bw, 0.0, 255.0, THRESH_BINARY | THRESH_OTSU);
  threshold(grad, bw,125, 255.0, THRESH_BINARY);
  
  //imshow("bw",bw);
  //waitKey(30000);
  
  // connect horizontally oriented regions
  Mat connected;
  morphKernel = getStructuringElement(MORPH_CROSS, Size(2, 2));
  morphologyEx(bw, connected, MORPH_CLOSE, morphKernel);
  
  //connected=bw;
  
  //imshow("connected",connected);
  //waitKey(30000);
  
  // find contours
  Mat mask = Mat::zeros(bw.size(), CV_8UC1);
  vector<vector<Point > > contours;
  vector<Vec4i> hierarchy;
  
  findContours(connected, contours, hierarchy, CV_RETR_CCOMP, CV_CHAIN_APPROX_SIMPLE, Point(0, 0));
  
  // filter contours
  for(int idx = 0; idx >= 0; idx = hierarchy[idx][0])
    {
      Rect rect = boundingRect(contours[idx]);
      Mat maskROI(mask, rect);
      maskROI = Scalar(0, 0, 0);
      // fill the contour
      drawContours(mask, contours, idx, Scalar(255, 255, 255), CV_FILLED);
      // ratio of non-zero pixels in the filled region
      double r = (double)countNonZero(maskROI)/(rect.width*rect.height);

      if (r > .45 /* assume at least 45% of the area is filled if it contains text */
	              &&
	  (rect.height > 8 && rect.width > 8) /* constraints on region size */
	  /* these two conditions alone are not very robust. better to use something 
	     like the number of significant peaks in a horizontal projection as a third condition */
	  )
	{
	  rectangle(rgb, rect, Scalar(0, 255, 0), 2);
	}
    }
  imwrite(OUTPUT_FOLDER_PATH + string("rgb.jpg"), rgb);
  imshow("output",rgb);
  waitKey(0);
  return 0;
}
